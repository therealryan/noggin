<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>dev.flowty.noggin</groupId>
	<artifactId>parent</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>pom</packaging>
	<description>Radiography data extraction</description>
	<url>https://github.com/therealryan/noggin</url>

	<modules>
		<module>extract</module>
		<module>volume</module>
	</modules>

	<scm>
		<connection>scm:git:https://github.com/therealryan/noggin</connection>
		<developerConnection>scm:git:https://github.com/therealryan/noggin</developerConnection>
		<tag>HEAD</tag>
		<url>https://github.com/therealryan/noggin</url>
	</scm>

	<properties>
		<maven.compiler.target>20</maven.compiler.target>
		<maven.compiler.source>20</maven.compiler.source>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
	</properties>

	<dependencyManagement>
		<dependencies>

			<dependency>
				<!-- JSON support -->
				<groupId>com.fasterxml.jackson.core</groupId>
				<artifactId>jackson-databind</artifactId>
				<version>2.16.1</version>
			</dependency>

			<dependency>
				<!-- testing -->
				<groupId>org.junit</groupId>
				<artifactId>junit-bom</artifactId>
				<version>5.10.1</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>

			<dependency>
				<!-- Mocks for testing -->
				<groupId>org.mockito</groupId>
				<artifactId>mockito-core</artifactId>
				<version>4.11.0</version>
			</dependency>

			<dependency>
				<!-- Logging support -->
				<groupId>org.slf4j</groupId>
				<artifactId>slf4j-simple</artifactId>
				<version>2.0.11</version>
			</dependency>

		</dependencies>
	</dependencyManagement>

	<repositories>
		<repository>
			<!-- source for dcm4che artifacts -->
			<id>scijava</id>
			<url>https://www.dcm4che.org/maven2/</url>
		</repository>
	</repositories>

	<build>
		<pluginManagement>
			<plugins>

				<plugin>
					<!-- junit5 support -->
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-surefire-plugin</artifactId>
					<version>3.2.5</version>
				</plugin>

				<plugin>
					<!-- `mvn formatter:format` to apply the format -->
					<groupId>net.revelc.code.formatter</groupId>
					<artifactId>formatter-maven-plugin</artifactId>
					<version>2.23.0</version>
					<configuration>
						<!-- This plugin only executes in the child modules, so
						we need to
							step one dir up and then back down to
						the format file. If we end up with
							deeper-nested
						projects then they'll need to step commensurately
						further up -->
						<configFile>${project.basedir}/../src/main/eclipse/format.xml</configFile>
						<lineEnding>LF</lineEnding>
					</configuration>
					<executions>
						<execution>
							<goals>
								<!-- Fails builds on non-compliant formatting -->
								<goal>validate</goal>
							</goals>
						</execution>
					</executions>
				</plugin>

				<plugin>
					<!-- `mvn sortpom:sort` to format the pom files -->
					<groupId>com.github.ekryd.sortpom</groupId>
					<artifactId>sortpom-maven-plugin</artifactId>
					<version>3.0.1</version>
					<configuration>
						<lineSeparator>\n</lineSeparator>
						<nrOfIndentSpace>-1</nrOfIndentSpace>
						<createBackupFile>false</createBackupFile>
						<expandEmptyElements>false</expandEmptyElements>
						<spaceBeforeCloseEmptyElement>true</spaceBeforeCloseEmptyElement>
					</configuration>
				</plugin>

				<plugin>
					<!-- `mvn -Paggregate clean test
					org.pitest:pitest-maven:mutationCoverage package`
					     to
					generate target/pit-reports in each module and then collate
					them in aggregator -->
					<!-- Alternatively you can create a 'target/mutate' file in
					a given
					     project to have mutation testing performed
					for a single project only on
					     a `mvn test-compile`
					invocation -->
					<groupId>org.pitest</groupId>
					<artifactId>pitest-maven</artifactId>
					<version>1.15.4</version>
					<configuration>
						<timestampedReports>false</timestampedReports>
						<exportLineCoverage>true</exportLineCoverage>
						<outputFormats>
							<value>HTML</value>
							<value>XML</value>
						</outputFormats>
						<threads>8</threads>
					</configuration>
					<dependencies>
						<dependency>
							<groupId>org.pitest</groupId>
							<artifactId>pitest-junit5-plugin</artifactId>
							<version>1.2.1</version>
						</dependency>
					</dependencies>
				</plugin>

				<plugin>
					<!-- `mvn javadoc:aggregate` to generate target/site/apidocs
					in the
						parent -->
					<!-- `mvn javadoc:javadoc` to generate target/site/apidocs
					in each module -->
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-javadoc-plugin</artifactId>
					<version>3.6.3</version>
				</plugin>

			</plugins>
		</pluginManagement>

		<plugins>

			<plugin>
				<groupId>net.revelc.code.formatter</groupId>
				<artifactId>formatter-maven-plugin</artifactId>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-source-plugin</artifactId>
				<version>3.3.0</version>
				<executions>
					<execution>
						<id>attach-sources</id>
						<goals>
							<goal>jar</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-javadoc-plugin</artifactId>
				<executions>
					<execution>
						<id>generate-javadoc</id>
						<goals>
							<goal>jar</goal>
						</goals>
						<phase>package</phase>
						<configuration>
							<nodeprecated>true</nodeprecated>
							<additionalOptions>-Xdoclint:none</additionalOptions>
						</configuration>
					</execution>
				</executions>
			</plugin>

		</plugins>
	</build>

	<profiles>

		<profile>
			<!-- Mutation testing can take a while to run, so it's tedious to
			have
			     to invoke it on every module when you're iterating on
			one of them. This profile
			     runs mutation testing for those
			projects that have a file called 'mutate'
			     in their target
			directory in the test-compile phase -->
			<!-- Hence to mutate a single project, from the parent project do: -->
			<!-- touch <module>/target/mutate -->
			<!-- mvn test-compile -->
			<id>mutate</id>
			<activation>
				<file>
					<exists>target/mutate</exists>
				</file>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>org.pitest</groupId>
						<artifactId>pitest-maven</artifactId>
						<executions>
							<execution>
								<goals>
									<goal>mutationCoverage</goal>
								</goals>
								<phase>test-compile</phase>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<!-- By default mutation testing will be started from fresh on every
			invocation, but
			     when you're working on a single class this
			can slow down your iteration cycle.
			     Activating this profile
			with `-Piterate` will cause pitest to take account of
			     historic
			results and only exercise the changes since last time. This is much
			faster, but can sometimes give erroneous results -->
			<id>iterate</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.pitest</groupId>
						<artifactId>pitest-maven</artifactId>
						<configuration>
							<historyInputFile>target/pit_hist</historyInputFile>
							<historyOutputFile>target/pit_hist</historyOutputFile>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>

	</profiles>

</project>
